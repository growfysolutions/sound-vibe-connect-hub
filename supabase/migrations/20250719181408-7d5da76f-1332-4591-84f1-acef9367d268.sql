-- Fix missing columns and relationships for Phase 2 features

-- Add missing columns to profiles table
ALTER TABLE profiles ADD COLUMN IF NOT EXISTS software text[];

-- Create profiles_professional_roles junction table if it doesn't exist
CREATE TABLE IF NOT EXISTS profiles_professional_roles (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  role text NOT NULL,
  created_at timestamp with time zone DEFAULT now()
);

-- Enable RLS for profiles_professional_roles
ALTER TABLE profiles_professional_roles ENABLE ROW LEVEL SECURITY;

-- Create policies for profiles_professional_roles
CREATE POLICY "Public read access to professional roles" 
ON profiles_professional_roles 
FOR SELECT 
USING (true);

CREATE POLICY "Users can manage their own professional roles" 
ON profiles_professional_roles 
FOR ALL 
USING (profile_id = auth.uid());

-- Add foreign key constraints to connections table if they don't exist
DO $$ 
BEGIN
  -- Check if foreign key exists before adding
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE constraint_name = 'connections_requester_id_fkey'
  ) THEN
    ALTER TABLE connections 
    ADD CONSTRAINT connections_requester_id_fkey 
    FOREIGN KEY (requester_id) REFERENCES profiles(id) ON DELETE CASCADE;
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE constraint_name = 'connections_addressee_id_fkey'
  ) THEN
    ALTER TABLE connections 
    ADD CONSTRAINT connections_addressee_id_fkey 
    FOREIGN KEY (addressee_id) REFERENCES profiles(id) ON DELETE CASCADE;
  END IF;
END $$;

-- Create helper function for checking conversation membership
CREATE OR REPLACE FUNCTION is_member_of_conversation(conversation_id uuid, user_id uuid)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM conversation_participants 
    WHERE conversation_participants.conversation_id = $1 
    AND conversation_participants.user_id = $2
  );
END;
$$;

-- Create helper function for checking contract parties
CREATE OR REPLACE FUNCTION is_party_to_contract(contract_id uuid, user_id uuid)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM contracts 
    WHERE contracts.id = $1 
    AND (contracts.client_id = $2 OR contracts.professional_id = $2)
  );
END;
$$;